function customRecordPicker($timeout, $http, urlTools, filterExpressionParser, escapeHtml, i18n) {
	"use strict";
	var cache = {};
	function cleanLabel(val) {
		if (val && typeof val == "object")
			return typeof val.display_value == "string" ? val.display_value.trim() : "";
		return typeof val == "string" ? val.trim() : val;
	}

	function buildInitials(name) {
		if (!name)
			return "--";
		var initials = '';
		name.split(" ").forEach(function(word) {
		var upperCaseWord = word.toUpperCase();
		if(upperCaseWord.match(/^[A-Z]/))
			initials += upperCaseWord[0];
		});
		return initials.length > 3 ? initials.substr(0,3) : initials;
	}

	return {
		restrict: 'E',
		replace: true,
		scope: {
			field: '=?',
			table: '=',
			defaultQuery: '=?',
			startswith: '=?',
			searchFields: '=?',
			valueField: '=?',
			displayField: '=?',
			displayFields: '=?',
			pageSize: '=?',
			onChange: '&',
			snDisabled: '=',
			multiple: '=?',
			options: '=?',
			placeholder: '@'
		},
		template: 
		'<input type="text" ng-disabled="snDisabled" style="flex-grow: 1;" name="{{field.name}}" ng-model="field.value"' +
		' sn-atf-data-type="reference" sn-atf-data-type-params=\'{"reference" : "{{table}}", "reference_qual" : "{{defaultQuery}}",' +
		' "valueField" : "{{valueField}}", "displayField" : "{{displayField}}"}\' sn-atf-class="builtin:ATF.BaseSNRecordPicker" aria-hidden="true" sn-atf-component-value="{{field}}"/>',
		controller: function ($scope) {
			if (!angular.isNumber($scope.pageSize))
				$scope.pageSize = 20;
			if (!angular.isDefined($scope.valueField))
				$scope.valueField = 'sys_id';
			this.filterResults = function (data, page) {
				return {
					results: data.data.result,
					more: (page * $scope.pageSize < parseInt(data.headers('x-total-count'), 10))
				};
			};
		},
		link: function (scope, element, attrs, ctrl) {
			var TOKENIZER = '####';
			var isExecuting = false;
			var remove = i18n.getMessage("Remove");
			function getRemoveItem(label) { return jQuery("<span class='sr-only' />").text(remove + " " + label); };
			var select2Helpers = {
				formatSelection: function (item) {
					var avatar = escapeHtml(getAvatar(item)) || item['avatar'];
					var initials = escapeHtml(getInitials(item));
					var name = item['name'];
					initials = buildInitials(name);
					var markup="<div style='display:flex;'>";
					if (avatar && avatar !== '.iix') {
						markup += "<div style='background-image: url(" + avatar + "?t=small); width: 22px; height: 22px; background-size: contain; border-radius: 50%; margin-right: 8px; margin-top:6px;'></div>";
					}
					else if(initials != undefined && initials != "") {
						markup += "<div style='border: 1px solid #181A1F; display:flex; justify-content: center; align-items: center; font-size:10px; width: 22px; height: 22px; background-size: contain; border-radius: 50%; margin-right: 8px; margin-top:6px;'>" + initials + "</div>";
					}
					markup += "<div style='flex-grow: 1; '>" + escapeHtml(getDisplayValue(item)) + "</div> ";
					markup+="<div>"

					return markup;
				},
				formatResult: function (item) {
					var displayFields = getdisplayFields(item);
					var avatar = item['avatar'];
					var name = item['name'];
					var initial = buildInitials(name);
					var title = item['title'];

					if (displayFields.length > 0) {
						//Avatar
						var markup="<div style='display:flex;'>";
						if(avatar) {
							markup += "<div style='background-image: url(" + avatar + "?t=small); width: 32px; height: 32px; background-size: contain; border-radius: 50%; margin: 4px 8px;'></div>";
						} else {
							markup += "<div style='border: 1px solid #181A1F; display:flex; justify-content: center; align-items: center; font-size:12px; width: 32px; height: 32px; background-size: contain; border-radius: 50%; margin: 4px 8px;'>" + initial + "</div>";
						}
						markup+="<div>"

						//Name and Title
						markup += "<div style='display:flex; flex-direction: column; font-size:16px; '>"
						//Name
						markup += "<div style='flex-grow: 1; '>" + escapeHtml(cleanLabel(displayFields[0])) + "</div> ";
						//Title
						if(title) {
							markup += "<div style='color: #474D5A; flex-grow: 1; '>" + title + "</div>";
						} else {
							markup += "<div style='color: #474D5A; flex-grow: 1; '>" + i18n.getMessage("(empty)") + "</div>";
						}

						markup += "</div>";
						return markup;
					}
					return "";
				},
				search: function (queryParams) {
					var url = '/api/now/table/' + scope.table + '?' + urlTools.encodeURIParameters(queryParams.data);
					if (scope.options && scope.options.cache && cache[url])
						return queryParams.success(cache[url]);
					return $http.get(url).then(function (response) {
						if (scope.options && scope.options.cache) {
							cache[url] = response;
						}
						return queryParams.success(response)
					});
				},
				initSelection: function (elem, callback) {
					if (scope.field.displayValue) {
						if (scope.multiple) {
							var items = [], sel;
							var values = scope.field.value.split(',');
							var displayValues = scope.field.displayValue.split(TOKENIZER);
							for (var i = 0; i < values.length; i++) {
								sel = {};
								sel[scope.valueField] = values[i];
								sel[scope.displayField] = displayValues[i];
								items.push(sel);
							}
							callback(items);
						}
						else {
							var sel = {};
							sel[scope.valueField] = scope.field.value;
							sel[scope.displayField] = scope.field.displayValue;
							sel['avatar'] = scope.field.avatar;
							sel['initials'] = scope.field.initials;
							callback(sel);
						}
					} else
						callback([]);
				},
				formatSelectionCssClass: function (item, el) {
					var anchorEl = el.parent().find("a");
					if (anchorEl.length) {
						anchorEl.removeAttr("tabindex");
						anchorEl.addClass("fa fa-times");
						anchorEl.append(getRemoveItem(item[scope.displayField]));
					}
				}
			};
			var config = {
				width: '100%',
				containerCssClass: 'select2-reference ng-form-element',
				placeholder: scope.placeholder || '    ',
				formatSearching: '',
				allowClear: (scope.options && typeof scope.options.allowClear !== "undefined") ? scope.options.allowClear : true,
				id: function (item) {
					return item[scope.valueField];
				},
				ajax: {
					quietMillis: NOW.ac_wait_time,
					data: function (filterText, page) {
						var fields = [scope.valueField, 'name', 'title'];
						if (scope.displayField)
							fields.push(scope.displayField);
						if (scope.displayFields)
							fields.push(scope.displayFields);
						var params = {
							sysparm_offset: (scope.pageSize * (page - 1)),
							sysparm_limit: scope.pageSize,
							sysparm_query: buildQuery(filterText, scope.searchFields, scope.defaultQuery),
							sysparm_fields: fields.join(','),
							sysparm_display_value: true
						};
						return params;
					},
					results: function (data, page) {
						return ctrl.filterResults(data, page, scope.pageSize);
					},
					transport: select2Helpers.search
				},
				formatSelection: select2Helpers.formatSelection,
				formatResult: select2Helpers.formatResult,
				formatResultCssClass: function () { return ''; },
				initSelection: select2Helpers.initSelection,
				multiple: scope.multiple,
				formatSelectionCssClass: select2Helpers.formatSelectionCssClass
			};
			function buildQuery(filterText, searchFields, defaultQuery) {
				var queryParts = [];
				var operator = "CONTAINS";
				if (scope.startswith)
					operator = "STARTSWITH";
				if (filterText.startsWith("*")) {
					filterText = filterText.substring(1);
					operator = "CONTAINS";
				}
				if (defaultQuery)
					queryParts.push(defaultQuery);
				var filterExpression = filterExpressionParser.parse(filterText, operator);
				if (searchFields != null) {
					var fields = searchFields.split(',');
					if (filterExpression.filterText != '') {
						var OR = "";
						for (var i = 0; i < fields.length; i++) {
							queryParts.push(OR + fields[i] + filterExpression.operator + filterExpression.filterText);
							OR = "OR";
						}
					}
					for (var i = 0; i < fields.length; i++)
						queryParts.push('ORDERBY' + fields[i]);
					queryParts.push('EQ');
				}
				if (defaultQuery && defaultQuery.indexOf('ORDERBY') != -1)
					queryParts.push(defaultQuery);
				return queryParts.join('^');
			}
			scope.field = scope.field || {};
			if (scope.field.displayValue && scope.multiple)
				scope.field.displayValue = scope.field.displayValue.replace(/,/g, TOKENIZER);
			var initTimeout = null;
			var value = scope.field.value;
			var oldValue = scope.field.value;
			var $select;
			function init() {
				element.css("opacity", 0);
				$timeout.cancel(initTimeout);
				initTimeout = $timeout(function () {
					i18n.getMessage('Searching...', function (searchingMsg) {
						config.formatSearching = function () {
							return searchingMsg;
						};
					});
					element.css("opacity", 1);
					element.select2("destroy");
					$select = element.select2(config);
					$select.bind("change", onChanged);
					$select.bind("select2-selecting", onSelecting);
					$select.bind("select2-removing", onRemoving);
					$select.bind("sn-atf-setvalue", onAtfSetValue);
					scope.$emit('select2.ready', element);
					element.parent().find(".select2-focusser")
						.attr("aria-label", getAriaLabel())
						.attr("aria-controls", "select2-drop");
					updateAriaExpanded(false);
				});
			}
			function getAriaLabel() {
				var label = "", field = scope.field;
				label += field.label;
				if (field.displayValue || field.value) {
					label += (" " + (field.displayValue || field.value));
				}
				return label || i18n.getMessage("Choose");
			}
			function onAtfSetValue(e) {
				var valueToSet = e.detail ? e.detail.newValue : null;
				if (scope.multiple) {
					var data = element.select2("data");
					for (var i = 0; i < data.length; i++) {
						element.triggerHandler({ type: "select2-removing", choice: data[i] });
					}
					if (!valueToSet)
						return;
					var selected = {};
					selected[scope.valueField] = valueToSet.value;
					if (scope.displayField)
						selected[scope.displayField] = valueToSet.displayValue;
					element.triggerHandler({ type: "select2-selecting", choice: selected });
					return;
				}
				var changeEventParameters = { type: "change" };
				if (scope.field.value)
					changeEventParameters.removed = element.select2("data");
				if (valueToSet) {
					var added = {};
					added[scope.valueField] = valueToSet.value;
					if (scope.displayField)
						added[scope.displayField] = valueToSet.displayValue;
					changeEventParameters.added = added;
					element.val(valueToSet.value);
					scope.field.displayValue = valueToSet.displayValue;
				} else
					element.val("");
				element.triggerHandler(changeEventParameters);
			}
			function onSelecting(e) {
				isExecuting = true;
				oldValue = scope.field.value;
				var selectedItem = e.choice;
				if (scope.multiple && selectedItem[scope.valueField] != '') {
					var values = !scope.field.value ? [] : scope.field.value.split(',');
					var displayValues = !scope.field.displayValue ? [] : scope.field.displayValue.split(TOKENIZER);
					values.push(selectedItem[scope.valueField]);
					displayValues.push(getDisplayValue(selectedItem));
					scope.field.value = values.join(',');
					scope.field.displayValue = displayValues.join(TOKENIZER);
					e.preventDefault();
					$select.select2('val', values).select2('close');
					scope.$apply(function () {
						callChange(oldValue, e);
					});
				}
			}
			function onRemoving(e) {
				isExecuting = true;
				oldValue = scope.field.value;
				var removed = e.choice;
				if (scope.multiple) {
					var values = scope.field.value.split(',');
					var displayValues = scope.field.displayValue.split(TOKENIZER);
					for (var i = values.length - 1; i >= 0; i--) {
						if (removed[scope.valueField] == values[i]) {
							values.splice(i, 1);
							displayValues.splice(i, 1);
							break;
						}
					}
					scope.field.value = values.join(',');
					scope.field.displayValue = displayValues.join(TOKENIZER);
					e.preventDefault();
					$select.select2('val', scope.field.value.split(','));
					scope.$apply(function () {
						callChange(oldValue, e);
					});
				}
			}
			function callChange(oldValue, e) {
				var f = scope.field;
				var p = {
					field: f,
					newValue: f.value,
					oldValue: oldValue,
					displayValue: f.displayValue
				}
				scope.$emit("field.change", p);
				scope.$emit("field.change." + f.name, p);
				if (scope.onChange)
					try {
						scope.onChange(e);
					} catch (ex) {
						console.log("directive.snRecordPicker error in onChange")
						console.log(ex)
					}
				isExecuting = false;
			}
			function onChanged(e) {
				e.stopImmediatePropagation();
				if (scope.$$phase || scope.$root.$$phase) {
					console.warn('in digest, returning early');
					return;
				}
				if (e.added) {
					var selectedItem = e.added;
					if (!scope.multiple) {
						scope.field.value = selectedItem[scope.valueField];
						if (scope.field.value) {
							scope.field.displayValue = getDisplayValue(selectedItem);
						} else
							scope.field.displayValue = '';
					}
				} else if (e.removed) {
					if (!scope.multiple) {
						scope.field.displayValue = '';
						scope.field.value = '';
					}
				}
				scope.$apply(function () {
					callChange(oldValue, e);
				});
			}
			function getDisplayValue(selectedItem) {
				var displayValue = selectedItem[scope.valueField];
				if (selectedItem) {
					if (scope.displayField && angular.isDefined(selectedItem[scope.displayField]))
						displayValue = selectedItem[scope.displayField];
					else if (selectedItem.name)
						displayValue = selectedItem.name;
					else if (selectedItem.title)
						displayValue = selectedItem.title;
				}
				return cleanLabel(displayValue);
			}
			function getAvatar(selectedItem) {
				var displayValue = selectedItem['avatar'];
				return cleanLabel(displayValue);
			}
			function getInitials(selectedItem) {
				var displayValue = selectedItem['initials'];
				return cleanLabel(displayValue);
			}
			function getdisplayFields(selectedItem) {
				var displayFields = [];
				if (selectedItem && selectedItem[scope.valueField]) {
					var current = "";
					if (scope.displayField && angular.isDefined(selectedItem[scope.displayField]))
						current = selectedItem[scope.displayField];
					else if (selectedItem.name)
						current = selectedItem.name;
					else if (selectedItem.title)
						current = selectedItem.title;
					displayFields.push(current);
				}
				if (scope.displayFields) {
					var columns = scope.displayFields.split(",");
					for (var i = 0; i < columns.length; i++) {
						var column = columns[i];
						if (selectedItem[column])
							displayFields.push(selectedItem[column]);
					}
				}
				return displayFields;
			}
			scope.$watch("field.value", function (newValue) {
				if (isExecuting) return;
				if (angular.isDefined(newValue) && $select) {
					if (scope.multiple)
						$select.select2('val', newValue.split(',')).select2('close');
					else
						$select.select2('val', newValue).select2('close');
				}
			});
			function updateAriaExpanded(isOpen) {
				if (scope.multiple)
					element.parent().find(".select2-choices input[role='combobox']").attr("aria-expanded", isOpen);
				else
					element.parent().find(".select2-focusser").attr("aria-expanded", isOpen);
			}
			element.bind("select2-open", function () {
				updateAriaExpanded(true);
			});
			element.bind("select2-close", function () {
				updateAriaExpanded(false);
			});
			if (attrs.displayValue) {
				attrs.$observe('displayValue', function (value) {
					scope.field.value = value;
				});
			}
			init();
		}
	};
}
